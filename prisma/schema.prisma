generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DEPLOY")
}

enum DataType {
  Data
  PDF
  Record
  Video
}

enum CategoryType {
  Data
  College
  Summary
  Questions
}

enum LectureType {
  Normal
  Practical
  FinalRevision
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String
  city String

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()

  users User[]
  years StudyingYear[]
}

model User {
  id              Int              @id @default(autoincrement())
  googleSubId     String           @unique
  givenName       String
  familyName      String
  email           String           
  picture         String
  status          Boolean          @default(false)
  role            Role             @relation(fields: [roleId], references: [id])
  roleId          Int              @default(1)
  facultyId       Int?             
  yearId          Int?             
  faculty         Faculty?         @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year            StudyingYear?    @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  devices         Device[]
  createdAt       DateTime?        @default(now()) @db.Timestamp()
  updatedAt       DateTime?        @updatedAt @db.Timestamp()
  markedQuestions MarkedQuestion[]
}

model Role {
  id          Int              @id @default(autoincrement()) // Role ID
  name        String           @unique                      // e.g., "Admin", "Teacher"
  description String?                                         // Optional description
  users       User[]           
  permissions RolePermission[] // Many permissions can be assigned to this role
}

model Permission {
  id          Int              @id @default(autoincrement()) // Unique ID
  name        String           @unique                      // e.g., "create_lecture"
  description String?                                         // What this permission does
  roles       RolePermission[] // Which roles allow this permission
}

model RolePermission {
  id           Int         @id @default(autoincrement()) // Link record ID
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       Int
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int

  @@unique([roleId, permissionId]) // Prevent duplicates
}

model StudyingYear {
  id        Int       @id @default(autoincrement())
  title     String
  facultyId Int
  faculty   Faculty   @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
  modules   Module[]
  users     User[]
}

model Module {
  id           Int    @id @default(autoincrement())
  yearId       Int
  name         String
  semesterName Int    @default(1) @db.SmallInt
  icon         String

  year     StudyingYear @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjects Subject[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  moduleId Int
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  lectures Lecture[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Lecture {
  id        Int         @id @default(autoincrement())
  title     String
  subTitle  String
  subjectId Int
  type      LectureType @default(Normal) // Lecture, Final Revision, Practical
  subject   Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date      DateTime?   @db.Date

  createdAt DateTime?     @db.Timestamp()
  updatedAt DateTime?     @updatedAt @db.Timestamp()
  links     LectureLink[]
  quizzes   Quiz[]
}

model LectureLink {
  id          Int          @id @default(autoincrement())
  title       String
  subTitle    String
  url         String
  type        DataType     @default(PDF)
  category    CategoryType @default(Data)
  lectureId   Int
  lectureData Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notifiable  Boolean      @default(true)
  createdAt   DateTime?    @db.Timestamp()
  updatedAt   DateTime?    @updatedAt @db.Timestamp()
}

model Device {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Quiz {
  id          Int        @id @default(autoincrement())
  lectureId   Int
  lectureData Lecture    @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  questions   Question[]
  notifiable  Boolean      @default(true)
  createdAt   DateTime?  @db.Timestamp()
  updatedAt   DateTime?  @updatedAt @db.Timestamp()
}

model Question {
  id                 Int              @id @default(autoincrement())
  quizId             Int
  quiz               Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image              String?
  explanation        String?
  text               String
  options            String[]
  correctOptionIndex Int
  createdAt          DateTime?        @db.Timestamp()
  updatedAt          DateTime?        @updatedAt @db.Timestamp()
  markedBy           MarkedQuestion[]
}

model MarkedQuestion {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime? @db.Timestamp()
  updatedAt  DateTime? @updatedAt @db.Timestamp()
}
