generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DEPLOY")
}

enum DataType {
  Data
  PDF
  Record
  Video
}

enum CategoryType {
  Data
  College
  Summary
  Questions
}

enum LectureType {
  Normal
  Practical
  FinalRevision
}

enum UserRole {
  Admin
  User
  Editor
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String
  city String

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()

  users User[]
  years StudyingYear[]
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password        String
  status          Boolean          @default(false)
  role            UserRole         @default(User)
  facultyId       Int
  yearId          Int              @default(1)
  faculty         Faculty          @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year            StudyingYear     @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  devices         Device[]
  createdAt       DateTime?        @db.Timestamp()
  updatedAt       DateTime?        @updatedAt @db.Timestamp()
  markedQuestions MarkedQuestion[]
}

model StudyingYear {
  id        Int       @id @default(autoincrement())
  title     String
  facultyId Int
  faculty   Faculty   @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
  modules   Module[]
  users     User[]
}

model Module {
  id           Int    @id @default(autoincrement())
  yearId       Int
  name         String
  semesterName Int    @default(1) @db.SmallInt
  icon         String

  year     StudyingYear @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjects Subject[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  moduleId Int
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  lectures Lecture[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Lecture {
  id        Int         @id @default(autoincrement())
  title     String
  subTitle  String
  subjectId Int
  type      LectureType @default(Normal) // Lecture, Final Revision, Practical
  subject   Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date      DateTime?   @db.Date

  createdAt        DateTime?       @db.Timestamp()
  updatedAt        DateTime?       @updatedAt @db.Timestamp()
  links            LectureLink[]
  quizzes          Quiz[]
  practicalQuizzes PracticalQuiz[]
}

model LectureLink {
  id             Int          @id @default(autoincrement())
  title          String
  subTitle       String
  url            String
  additionalUrls String[]     @default([])
  type           DataType     @default(PDF)
  category       CategoryType @default(Data)
  lectureId      Int
  lectureData    Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notifiable     Boolean      @default(true)
  createdAt      DateTime?    @db.Timestamp()
  updatedAt      DateTime?    @updatedAt @db.Timestamp()
}

model Device {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Quiz {
  id          Int        @id @default(autoincrement())
  lectureId   Int
  lectureData Lecture    @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  questions   Question[]
  notifiable  Boolean    @default(true)
  createdAt   DateTime?  @db.Timestamp()
  updatedAt   DateTime?  @updatedAt @db.Timestamp()
}

model Question {
  id                 Int              @id @default(autoincrement())
  quizId             Int
  quiz               Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image              String?
  explanation        String?
  text               String
  options            String[]
  correctOptionIndex Int
  createdAt          DateTime?        @db.Timestamp()
  updatedAt          DateTime?        @updatedAt @db.Timestamp()
  markedBy           MarkedQuestion[]
}

model PracticalQuiz {
  id          Int                 @id @default(autoincrement())
  lectureId   Int
  lectureData Lecture             @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  questions   PracticalQuestion[]
  notifiable  Boolean             @default(true)
  createdAt   DateTime?           @db.Timestamp()
  updatedAt   DateTime?           @updatedAt @db.Timestamp()
}

model PracticalQuestion {
  id               Int               @id @default(autoincrement())
  quizId           Int
  quiz             PracticalQuiz     @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image            String?
  width            Int?
  height           Int?
  tapes            Rect[]            @relation("Tapes")
  masks            Rect[]            @relation("Masks")
  writtenQuestions WrittenQuestion[]
  createdAt        DateTime?         @db.Timestamp()
  updatedAt        DateTime?         @updatedAt @db.Timestamp()
}

model Rect {
  id             Int                @id @default(autoincrement())
  tapeQuestion   PracticalQuestion? @relation("Tapes", fields: [tapeQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tapeQuestionId Int?               @map("tapeQuestionId")
  maskQuestion   PracticalQuestion? @relation("Masks", fields: [maskQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  maskQuestionId Int?               @map("maskQuestionId")
  x              Float
  y              Float
  w              Float
  h              Float
  createdAt      DateTime?          @db.Timestamp()
  updatedAt      DateTime?          @updatedAt @db.Timestamp()
}

model WrittenQuestion {
  id         Int               @id @default(autoincrement())
  questionId Int
  question   PracticalQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text       String
  answer     String
  createdAt  DateTime?         @db.Timestamp()
  updatedAt  DateTime?         @updatedAt @db.Timestamp()
}

model MarkedQuestion {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime? @db.Timestamp()
  updatedAt  DateTime? @updatedAt @db.Timestamp()
}
